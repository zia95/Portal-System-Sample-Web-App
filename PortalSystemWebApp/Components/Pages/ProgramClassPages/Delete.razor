@page "/programclasses/delete"
@inject PortalSystemWebApp.Data.ApplicationDbContext DB
@using PortalSystemWebApp.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using PortalSystemWebApp.Components.Account;
@inject IdentityUserAccessor UserAccessor
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>ProgramClass</h4>
    <hr />
    @if (programclass is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@programclass.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Detail</dt>
            <dd class="col-sm-10">@programclass.Detail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GradeLevel</dt>
            <dd class="col-sm-10">@programclass.GradeLevel</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MaxClassSize</dt>
            <dd class="col-sm-10">@programclass.MaxClassSize</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartTime</dt>
            <dd class="col-sm-10">@programclass.StartTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndTime</dt>
            <dd class="col-sm-10">@programclass.EndTime</dd>
        </dl>
        <EditForm method="post" Model="programclass" OnValidSubmit="DeleteProgramClass" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(programclass is null)">Delete</button> |
            <a href="/programclasses">Back to List</a>
        </EditForm>
    }
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    ProgramClass? programclass;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        if(!UserAccessor.IsUserAdmin(user))
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        programclass = await DB.ProgramClass.FirstOrDefaultAsync(m => m.Id == Id);

        if (programclass is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteProgramClass()
    {
        DB.ProgramClass.Remove(programclass!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/programclasses");
    }
}
