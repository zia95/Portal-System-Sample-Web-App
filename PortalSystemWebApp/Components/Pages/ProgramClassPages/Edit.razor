@page "/ProgramClasses/edit"
@inject PortalSystemWebApp.Data.ApplicationDbContext DB
@using PortalSystemWebApp.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using PortalSystemWebApp.Components.Account;
@inject IdentityUserAccessor UserAccessor

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>ProgramClass</h4>
<hr />
@if (ProgramClass is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ProgramClass" OnValidSubmit="UpdateProgramClass" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="ProgramClass.Id" value="@ProgramClass.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="ProgramClass.Name" class="form-control" />
                    <ValidationMessage For="() => ProgramClass.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="detail" class="form-label">Detail:</label>
                    <InputText id="detail" @bind-Value="ProgramClass.Detail" class="form-control" />
                    <ValidationMessage For="() => ProgramClass.Detail" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="gradelevel" class="form-label">GradeLevel:</label>
                    <InputNumber id="gradelevel" @bind-Value="ProgramClass.GradeLevel" class="form-control" />
                    <ValidationMessage For="() => ProgramClass.GradeLevel" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="maxclasssize" class="form-label">MaxClassSize:</label>
                    <InputNumber id="maxclasssize" @bind-Value="ProgramClass.MaxClassSize" class="form-control" />
                    <ValidationMessage For="() => ProgramClass.MaxClassSize" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="starttime" class="form-label">StartTime:</label>
                    <InputDate id="starttime" @bind-Value="ProgramClass.StartTime" class="form-control" />
                    <ValidationMessage For="() => ProgramClass.StartTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="endtime" class="form-label">EndTime:</label>
                    <InputDate id="endtime" @bind-Value="ProgramClass.EndTime" class="form-control" />
                    <ValidationMessage For="() => ProgramClass.EndTime" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/programclasses">Back to List</a>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public ProgramClass? ProgramClass { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        if (!UserAccessor.IsUserAdmin(user))
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        ProgramClass ??= await DB.ProgramClass.FirstOrDefaultAsync(m => m.Id == Id);

        if (ProgramClass is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProgramClass()
    {
        DB.Attach(ProgramClass!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProgramClassExists(ProgramClass!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/programclasses");
    }

    bool ProgramClassExists(int id)
    {
        return DB.ProgramClass.Any(e => e.Id == id);
    }
}
